




------------------------------------ Python Tutorial ----------------------------------
started watching on: 02/06/2021, June 2, 2021
videos watched till: #43

1. vartiables in python -> x = 5; we don't have to specify the datatype
2. lists in python -> x = [1,1.5,"Tareq"]. Lists are defined in square brackets. Lists objects are mutable. List can store list objects inside list too.
3. Tuples in python -> x = (1,2,3,4). Tuples are like lists but tuple elements are immutable
4. Set in python -> x = {1,2,3,4}. Set elements cannot be accesed by indexing. Set stores elements in random order. Sets are used in hashing.
5. Dictionary in Python -> data = {'key':value}
6. Variables -> When we assign multiple variables to a same number, they do not get assigned with new address but instead points to the same address that contains the value. This is why python is much more memory efficient than other programming languages.
7. Data types in Python -> None, Numeric (int, float, complex, boolean), Lists, Tuple, Set, Range and Dictionary(mapping).
8. Operators in python -> Arithmatic (+,-,*,/,+=,-=,*=,/=), Relational (>,<,>=,<=,==,!=), Logical (and,or,not)
9. Number conversion -> bin(x),hex(x),oct(x),0b->bin,0o->Oct,0x->Hex. x is a decimal number.
10. swapping value of variables. a = 5, b=6, we can swap using -> a = a xor b, b= a xor b, a = a xor b. Another way is
a = a+b, b = a - b, a = a - b and one more way is a,b = b,a
11. Bitwise operator -> Complement(`), Bitwise and(&), Bitwise OR(||), XOR (^), left shift (<<), Right shift(>>)
12. Math functions in python -> import math, use math.sqrt(), math.pow wtc. functions. We can also use alias like import math as m then do m.sqrt(), m.pow(). Math is the module here that is imported from python where we have all the math fucntions predefined. 
13. Pycharm is the ide that i am using. To write and execute python codes just open pycharm then create a new project. Then right click on project folder and create new python file. Then run, debug and do other things with the code as needed.
14. User input in Python -> To take input from user we have to use the input() function. But, input() function by default takes strings as user input so to take 
integer, float or any other type of data as input we have to convert the string to that data type. Example: int(input("Enter an integer: ")). To take a character as input we will use input("Enter a character")[0] this line of code.
15. Conditional statements in python -> If, elif, else. We have to use indentation while using these statements (preferred tab button in keyboard).
16. Loops in python -> 1. While loop, 2. For loop
			While loop-> i = 1; while(i<=5): print("Hi) i = i+1 ; Use indentation after while block
			For loop-> x = [1,2,3,4], for i in x: some code. For loop can be used on  string,lists,tuple,sets etc. we just have to pass the list or the data in for loop with a counter for example say i. Condition increment of the counter is done by for loop itself.

17. Break, Continue and pass in python -> Break statement will exit out of the loop, Continue statement will not execute the furhter statements and return back to the condition (simply put skip some execution based on condition). Pass will be used to pass a block of code.

18.For Else in python-> We can  use else block with For loop in python. Just use For loop and use else block indented with the for loop. We need to also use the break keyword in the if block while using for else.

19. Arrays in python -> We can use arrays in python too. Difference between array and lists are that the datas stored in array should be of same data type but lists do not. To use array we need to import the array module. import array  or from array import * . When initializing the array we have to use a typecode which tells the type of the data type. 
Example : arr = array('i',[1,2,3,4,5,6]), newArr = array(arr.typecode,( a for a in arr )//creating a new array and copying arr arrays value in newArr.

20. Array input from user in python ->                                                                                    
from array import *                                                               
                                                                                  
val = array('i',[])                                                               
                                                                                  
n = int(input("Enter the length of array"))    // Taking the length from user                                   
                                                                                  
for i in range(n):                                                                
    x = int(input("Enter the value in array"))  // Taking the value from user                                  
    val.append(x)      // appending the user input value in array                                                            
print(val)                                                                        
// val.index(some value)// Method to search the index of a value              

21. Numpy in python -> Numpy is a python package that lets us to work with multidimensional arrys and a lot other things. Cmd command to install numpy -> pip3 install numpy. We also need to install numpy on our ide.

22. Arrays in numpy -> at first import array module. from numpy import *. Then initialize the array -> arr = (array[1,2,3],int). Type initialization is optional.

23. Different ways of creating arrays using numpy -> array(),linspace(),logspace(),zeroes(),ones(),arange()

24. Functions in python -> Function let's us reuse codes. syntax of function -> def function(): . Function takes arguments too. Example: def add(a,b). Functions can execute some statement and they can also return some value. To return some value we have to use the return keyword in function. Example: def sub(a,b): c = a-b , return c. We can return multiple values too.
25. Arguments in python -> Argument passing in python is neither pass by referrence or pass by value. 
In Python, we don't have the concept of 'pass by value' or 'pass by reference'. Instead, we have immutable or mutable arguments passed to the function. If we pass immutable objects like integer or string to function and try to update their value, their original value will not be updated instead a new variable will be created with updated value at new memory address. If we pass mutable objects like list or dictionary and try to update them, their original value will be updated at the same memory address
26. Types of arguments in python -> Position (pass the arguments in sequence), Keyword(pass the arguments using their name as keyword like name="",age=""), default(if a argument is not passed by default we can pass an argument but if an argument is passed the default argument is overwritten Example: person(name,age=18)), Variable length (Variable length let's us use as many arguments as we want in the function, to use this we pass an argument with * before the argument name which will pass a tuple. Example: def sum(a,*b))
27.keyword variable length arguments -> We know we can pass multiple arguments using variable length but if we also want to pass keywords for those arguments we can use vkargs, for that we just have to use ** before the argument name). Example: def person(name, **data).

28. Global and local variablesin python -> We have two scope while initializing variables. If we initialize a variable inside a function or some local block that variable can't be accessed globally. But we initialize a variable globally we can use it everywhere in the code. If we want initialize a variable as global we use the global keyword i.e. 

global a = 15; After we initialize a variable as global we can't initialize it as local. If we want both local and global variable in a code we can use globals() method. We will just specify the global variable whose value we want to change. Example: globals()['a'] = 15.

29. Recursion in python -> Recursion is a concept that allows a function to call itself.

30. Annonymous function -> Function without name or Lambda. Define a function with the help of lambda which doesn't have a name and takes one expression. Example: f = lambda a: a*a. f(5) -> 25

31. Filter, Map, Reduce -> Filter function filters a sequence based on a function. It takes two parameters.sequence(Filter(function, sequence)). We can also pass a lambda function inside Filter.
E.g. nums = [2,3,4,5,6,7,8,9,10]

evens = list(filter(lambda n:n%2==0,nums))

print(evens)

# Map just like filter also takes two parameters, a function and a iterable. Map can be used to update each element of the iterable by doing some operation. E.g. inc2 = list(map(lambda n:n+2,evens)), print(inc2)

# Reduce also takes 2 parameters, a function and a sequence. We can do an opertaion on the whole sequence using reduce. E.g. sum = sum = reduce(lambda a,b: a+b,inc2)

Know what is the difference between filter, reduce and map:

map: Takes a function f, and a list L1, and returns a list L2 obtained by applying f to every element of L1. Say f is a function that takes x and returns 2x. Then, map(f, [1,2,3,4]) returns [2,4,6,8].

reduce: Takes a binary operator f, a list L and a seed value (or identity element). It returns the seed value if the list is empty. Otherwise, it applies the binary operator f to the seed and first element of L, then applies f to the result of this and the 2nd element of L, and so on till L is exhausted. The result is returned. This can be seen as a generalization of factorial function.

filter: Takes a boolean function f and a list L1. It applies the function to each element of L1, and list of those elements that give true is returned.

32. 
                                                                    
                                                                                  











			