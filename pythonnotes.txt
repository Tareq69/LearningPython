




------------------------------------ Python Tutorial ----------------------------------
started watching on: 02/06/2021, June 2, 2021
videos watched till: #62

1. vartiables in python -> x = 5; we don't have to specify the datatype
2. lists in python -> x = [1,1.5,"Tareq"]. Lists are defined in square brackets. Lists objects are mutable. List can store list objects inside list too.
3. Tuples in python -> x = (1,2,3,4). Tuples are like lists but tuple elements are immutable
4. Set in python -> x = {1,2,3,4}. Set elements cannot be accesed by indexing. Set stores elements in random order. Sets are used in hashing.
5. Dictionary in Python -> data = {'key':value}
6. Variables -> When we assign multiple variables to a same number, they do not get assigned with new address but instead points to the same address that contains the value. This is why python is much more memory efficient than other programming languages.
7. Data types in Python -> None, Numeric (int, float, complex, boolean), Lists, Tuple, Set, Range and Dictionary(mapping).
8. Operators in python -> Arithmatic (+,-,*,/,+=,-=,*=,/=), Relational (>,<,>=,<=,==,!=), Logical (and,or,not)
9. Number conversion -> bin(x),hex(x),oct(x),0b->bin,0o->Oct,0x->Hex. x is a decimal number.
10. swapping value of variables. a = 5, b=6, we can swap using -> a = a xor b, b= a xor b, a = a xor b. Another way is
a = a+b, b = a - b, a = a - b and one more way is a,b = b,a
11. Bitwise operator -> Complement(`), Bitwise and(&), Bitwise OR(||), XOR (^), left shift (<<), Right shift(>>)
12. Math functions in python -> import math, use math.sqrt(), math.pow wtc. functions. We can also use alias like import math as m then do m.sqrt(), m.pow(). Math is the module here that is imported from python where we have all the math fucntions predefined. 
13. Pycharm is the ide that i am using. To write and execute python codes just open pycharm then create a new project. Then right click on project folder and create new python file. Then run, debug and do other things with the code as needed.
14. User input in Python -> To take input from user we have to use the input() function. But, input() function by default takes strings as user input so to take 
integer, float or any other type of data as input we have to convert the string to that data type. Example: int(input("Enter an integer: ")). To take a character as input we will use input("Enter a character")[0] this line of code.
15. Conditional statements in python -> If, elif, else. We have to use indentation while using these statements (preferred tab button in keyboard).
16. Loops in python -> 1. While loop, 2. For loop
			While loop-> i = 1; while(i<=5): print("Hi) i = i+1 ; Use indentation after while block
			For loop-> x = [1,2,3,4], for i in x: some code. For loop can be used on  string,lists,tuple,sets etc. we just have to pass the list or the data in for loop with a counter for example say i. Condition increment of the counter is done by for loop itself.

17. Break, Continue and pass in python -> Break statement will exit out of the loop, Continue statement will not execute the furhter statements and return back to the condition (simply put skip some execution based on condition). Pass will be used to pass a block of code.

18.For Else in python-> We can  use else block with For loop in python. Just use For loop and use else block indented with the for loop. We need to also use the break keyword in the if block while using for else.

19. Arrays in python -> We can use arrays in python too. Difference between array and lists are that the datas stored in array should be of same data type but lists do not. To use array we need to import the array module. import array  or from array import * . When initializing the array we have to use a typecode which tells the type of the data type. 
Example : arr = array('i',[1,2,3,4,5,6]), newArr = array(arr.typecode,( a for a in arr )//creating a new array and copying arr arrays value in newArr.

20. Array input from user in python ->                                                                                    
from array import *                                                               
                                                                                  
val = array('i',[])                                                               
                                                                                  
n = int(input("Enter the length of array"))    // Taking the length from user                                   
                                                                                  
for i in range(n):                                                                
    x = int(input("Enter the value in array"))  // Taking the value from user                                  
    val.append(x)      // appending the user input value in array                                                            
print(val)                                                                        
// val.index(some value)// Method to search the index of a value              

21. Numpy in python -> Numpy is a python package that lets us to work with multidimensional arrys and a lot other things. Cmd command to install numpy -> pip3 install numpy. We also need to install numpy on our ide.

22. Arrays in numpy -> at first import array module. from numpy import *. Then initialize the array -> arr = (array[1,2,3],int). Type initialization is optional.

23. Different ways of creating arrays using numpy -> array(),linspace(),logspace(),zeroes(),ones(),arange()

24. Functions in python -> Function let's us reuse codes. syntax of function -> def function(): . Function takes arguments too. Example: def add(a,b). Functions can execute some statement and they can also return some value. To return some value we have to use the return keyword in function. Example: def sub(a,b): c = a-b , return c. We can return multiple values too.
25. Arguments in python -> Argument passing in python is neither pass by referrence or pass by value. 
In Python, we don't have the concept of 'pass by value' or 'pass by reference'. Instead, we have immutable or mutable arguments passed to the function. If we pass immutable objects like integer or string to function and try to update their value, their original value will not be updated instead a new variable will be created with updated value at new memory address. If we pass mutable objects like list or dictionary and try to update them, their original value will be updated at the same memory address
26. Types of arguments in python -> Position (pass the arguments in sequence), Keyword(pass the arguments using their name as keyword like name="",age=""), default(if a argument is not passed by default we can pass an argument but if an argument is passed the default argument is overwritten Example: person(name,age=18)), Variable length (Variable length let's us use as many arguments as we want in the function, to use this we pass an argument with * before the argument name which will pass a tuple. Example: def sum(a,*b))
27.keyword variable length arguments -> We know we can pass multiple arguments using variable length but if we also want to pass keywords for those arguments we can use vkargs, for that we just have to use ** before the argument name). Example: def person(name, **data).

28. Global and local variablesin python -> We have two scope while initializing variables. If we initialize a variable inside a function or some local block that variable can't be accessed globally. But we initialize a variable globally we can use it everywhere in the code. If we want initialize a variable as global we use the global keyword i.e. 

global a = 15; After we initialize a variable as global we can't initialize it as local. If we want both local and global variable in a code we can use globals() method. We will just specify the global variable whose value we want to change. Example: globals()['a'] = 15.

29. Recursion in python -> Recursion is a concept that allows a function to call itself.

30. Annonymous function -> Function without name or Lambda. Define a function with the help of lambda which doesn't have a name and takes one expression. Example: f = lambda a: a*a. f(5) -> 25

31. Filter, Map, Reduce -> Filter function filters a sequence based on a function. It takes two parameters.sequence(Filter(function, sequence)). We can also pass a lambda function inside Filter.
E.g. nums = [2,3,4,5,6,7,8,9,10]

evens = list(filter(lambda n:n%2==0,nums))

print(evens)

# Map just like filter also takes two parameters, a function and a iterable. Map can be used to update each element of the iterable by doing some operation. E.g. inc2 = list(map(lambda n:n+2,evens)), print(inc2)

# Reduce also takes 2 parameters, a function and a sequence. We can do an opertaion on the whole sequence using reduce. E.g. sum = sum = reduce(lambda a,b: a+b,inc2)

Know what is the difference between filter, reduce and map:

map: Takes a function f, and a list L1, and returns a list L2 obtained by applying f to every element of L1. Say f is a function that takes x and returns 2x. Then, map(f, [1,2,3,4]) returns [2,4,6,8].

reduce: Takes a binary operator f, a list L and a seed value (or identity element). It returns the seed value if the list is empty. Otherwise, it applies the binary operator f to the seed and first element of L, then applies f to the result of this and the 2nd element of L, and so on till L is exhausted. The result is returned. This can be seen as a generalization of factorial function.

filter: Takes a boolean function f and a list L1. It applies the function to each element of L1, and list of those elements that give true is returned.

32. Decorators in python ->

33. Module in python -> Modules can be defined as a new file which will contain some code. We use module to divide our project in different parts. We can import a module and use all the functions/classes  of that module to build our project. Example of module -> 
demo.py

from Calc import *

a = 5
b = 3

c = multi(a,b)
print(c)

Calc.py 


def add (a,b):
    return a+b


def sub (a,b):
    return a-b


def multi (a,b):
    return a*b


def div (a,b):
    return a/b

34. Special variale __name__ -> This special variable indicates to the main module. If we print the value of __name__ in one module it will return the value main indicating that it is the main module but if we import a module in another module, the __name__ varibale instead of returning the main varibale will return name of the imported module and return main value for the current module. if __name == "__main__" do something, else do the other tasks.

35. Object Oriented Programming in Python -> We want to solve real world problems using virtual software. In real world Everything is an Object. Example: employee, laptop everything. Object has certain attributes and behavior/property. Example: Name,age, id are attribute and Eat, sleep, certain tasks are property or behavior. Functions are called methods in oop. OOP has two most important things. Classes and Object.

Special Note: Everything is an object in python. Which means every variable are objects of certain classes. For example if we assign x = 9, Here, x is an object of class "int".

36. Classes and Objects in oop -> Class is the design/blueprint of an object. Objects are the instances of a design.

Class -> Class Classname():
Objects -> objname = Class()

37. init method -> init method is used similar to a constructor. We can pass arguments in init method. init method by default always takes an argument called self which passes to the object of that classes. Self is the object pointer which means we are passing the object itself by using self or in other words self regeres to an object of a certain class.

38.   Everytime we create an object it takes a new memory space.
		c1 = Computer() -> This is the constructor. Constructor defines the size of the object
 Comparing two objects - > Define a compare method which takes two parameter(self,other). self parameters refers to the object with which we are comparing another object. other parameter refers to the other object that we are comparing self object with. Example: 

class Computer:

    def __init__(self,name,age):
        self.age = age
        self.name = name



    def config(self):
        print("Identificatin is: ",self.name,self.age)

    def updateAge(self,age):
        self.age = age
    def compare(self,other):
        if(self.age==other.age):
            print("Their age are same")
        else:
            print("Their age are not same")


comp1 = Computer("Navin", 28)
comp1.updateAge(30)
comp2 = Computer("Tareq", 30)
comp1.compare(comp2)


39. Instance variable and Class variable ->  Variables declared inside init methods are called instance variables and variables declared outside init methods but inside a class are called Class variables. If we want to change the value of a class variable we need to use the Class.variable = newvalue. For instance variables we can just call the object.variable and change the values. Example -> 


class Car:    # Defining a class
    wheels = 4       # this is a class variable
    def __init__(self):  # Init method of the class car
        self.com = "Com" # this is an instance variable
        self.mil = 10     # this is an instance variable



c1 = Car()              # Creating an object c1 of class Car
c1.mil = 20             # this is an instance variable
c1.com = "Lamorghini"   # this is an instance variable
c2 = Car()              # Creating an object c2 of class Car
c2.mil = 15             # this is an instance variable
c2.com = "Ferrari"      # this is an instance variable

Car.wheels = 6  # Changes the class variable wheels value to 6 from 4

print(c1.com,c1.mil,c1.wheels)
print(c2.com,c2.mil,c1.wheels)

40. Class methods, Static methods and Instance methods -> Accessor - Getter Methods( Gets some values) and Mutator - Setter Methods (Sets some values). Example: avg(self). These are the instance methods. Class methods are used to work with class variables. Exmaple:  @classmethod def schoolInfo(cls) : return cls.school . If we want to use a method to work with neither the class variables or instance variables we use the static method. Example: @staticmethods def info: print("This is student class"). We will call the static methods using classname.staticmethodname().

41. innerclass -> innerclass refers to the concept of creating a class inside an existing class. For example for a student class we can have a laptop class which will store the info of student's laptop. After defining the laptop class we can create an object of laptop class in the outer class inside a variable. 
Example ->   
class Student:

    def __init__(self,name,age):
        self.name = name
        self.age = age
        self.lap = self.Laptop()

    def show(self):
        print(self.name, self.age)
        self.lap.show()

    class Laptop:

        def __init__(self):
            self.cpu = "cpu"
            self.ram =  4

        def show(self):
            print(self.cpu, self.ram)



s1 = Student("Tareq","25")
s1.lap.cpu = "i5"
s1.lap.ram = 8
s1.show()

42. inheritance -> A class can inherit all the feature of another Feature. Class B (A) means class B inherits class A. A is the superclass and B is the subclass. This is single level inheritence. We can have multilevel inheritence too. Just use Class C(B). It is inheritting A and B. We can also do Class C(A,B)// this is multiple.

43. Constructor in inheritence -> Init will be called for superclass if subclass doesn't have init. If subclass does have init method, that init will be called. We can call the init of superclass using super.init. super().--init--.
Method and init in multiple will be called from left first (MRO).

44. Polymorphism -> One things can take many forms. Objects will have multiple forms. 4 Ways of implementing polymorphism. 1) Duck Typing, 2) Operator Overloading, 3) Method Overloading 4)Method Overriding.
At office we are one way, at home we are one way, so we are polymorphic.

Duck typing -> If the behavior matches with duck, it probably is a duck. If we have a method that takes an argument of some class, we can use some method of that class given that that method exists in that class or maybe in other classes as well. We just have to pass the class we want and make sure we have the method existing in that class. Example: 

class Pycharm:
    def execute(self):
        print('Compiling')
        print("Running")


class Intellij:
    def execute(self):
        print('Checking')
        print("Testing")
        print('Compiling')
        print("Running")

class Laptop:

    def code(self,ide):
        ide.execute()


ide = Intellij()
lap1 = Laptop()
lap1.code(ide)

Operator Overloading -> 5 + 6 -> 5 and 6 are the operands and + is the operator. By operator overloading we mean that we can overwrrite or overload any of the predefined methods that are already written in python and replace them with some code that we want to implement. Example:
#
# a = '5'
# b = '6'
#
# print(a + b)
#
# print(str.__add__(a,b))

class Student:

    def __init__(self,m1,m2):
        self.m1 = m1
        self.m2 = m2

    def __add__(self, other):
        m1 = self.m1 + other.m1
        m2 = self.m2 + other.m2
        s3 = Student(m1,m2)

        return  s3

    def __gt__(self, other):
        r1 = self.m1 + self.m2
        r2 = other.m1 + other.m2
        if r1 > r2:
            return True
        else:
            return False

    def __str__(self):
        return '{} {}'.format( self.m1,self.m2)


s1 = Student(58,69)
s2 = Student(69,65)

s3 = s1 + s2

if s1 > s2:
    print("s1 wins")
else:
    print("s2 wins")

a = 9
print(a.__str__())

print(s2)

Method Overloading -> Method overloading is not supporrted in python so we need to write some functions to implement it.
Method Overriding -> A method is being overridden by a new method. Example: If i don't have a phone I say my mother's phone is my phone but when i buy a new phone i say my phone is my new phone so i am overriding my mother's phone. 
Example:    
class A:

    def show(self):
        print("In a Show")

class B(A):
     def show(self):
        print("In B show")

a = B()
a.show()  // Prints in B show



45. Abstract Classes and methods -> abstract method is a method which only has declaration and doesn't have definition.
a class is called abstract class only if it has at least one abstract method.
when you inherit a abstract class as a parent to the child class, the child class should define all the abstract method present in parent class.
if it is not done then child class also becomes abstract class automatically.
at last, python by default doesn't support abstract class and abstract method, so there is a package called ABC(abstract base classes) by which we can make a class or method abstract.

Example:

from abc import ABC, abstractmethod

class Computer(ABC):
    @abstractmethod
    def process(self):
        pass


class Laptop(Computer):
    def process(self):
        print("Running.......")


com1 = Laptop()
com1.process()

46. Iterator ->

47. Generator ->

48. Exception handling in python ->  Syntax error, Logical error, Runtime error

Example: 

a = 5
b = 0


try:
    print(a / b)
except Exception as e:
    print("You can't divide by 0", e)

finally:
    print("Resource closed")

49. Multithreading in python-> Each thread executes a task. So if we want to run multiple task parallaly we will use multiple threads. 
Example: from time import sleep
from threading import Thread # Using thread to run two function parallaly using two thread


class Hello(Thread):
    def run(self):
        for i in range(5):
            print("Hello")
            sleep(1) # Execute Hello then wait 1 sec for Hi to execute

class Hi(Thread):
    def run(self):
        for i in range(5):
            print("Hi") #Execute Hi then wait 1 sec for Hello to execute
            sleep(1)


a1 = Hello()
a2 = Hi()
# Important thing to notice is Main thread will run a1 and a2 thread
a1.start() # Start method creates a new thread a1. We are using start method instead of run cause
# its override the run method
sleep(0.2) # To avoid collision
a2.start() # Start method creates a new thread a1. We are using start method instead of run cause
# its override the run method

a1.join() # Main thread will wait untill a1 joins a2 and then execute Bye
a2.join() # Main thread will wait untill a1 joins a2 and then execute Bye

print("Bye")

50. File Handling in python -> We can read, write or append something to a file. Opening a file -> f = open()

Reading from a file -> f = open('Bhrom.txt','r') # Opening a file in reading mode

print(f.read()) # Reading the entire file
for i in range(5):
    print(f.readline(),end="") # Reading the first 5 line of the file

Writting from a file ->  f1 = open('abc.txt','w') # opening a file in writting mode. If the file doesn't exist python
# will create a file of this name.
f1.write("hakndmanhfaf") # writting something in the file. Remember everytime we write something
# it will overwrite the previous elements in file.

Appending in a file ->  f2 = open('abc.txt','a') # Opening a file in append mode
f2.write(" I am learning python") # appending new elements in the file


Use rb, sb, ab while dealing with binary file like images.

51. Comments in python -> Comments are to let you remind what you did with this code . It also helps when you are working in a group. Example: This function is responsible to handle exceptions etc... A comment is written by putting a # in the beginning of the line. In python we do not have multi line comments. To comment multiple lines use multiple # .




				 

                                                                    
                                                                                  











			